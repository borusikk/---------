from django.db import IntegrityError
from django.core.cache import cache
from django.shortcuts import render, get_object_or_404, redirect
from django.db.models import Count, F
from .models import Professor, Feedback, Department
from .forms import FeedbackForm


def home(request):
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ —Ç–∞ –ø–æ—à—É–∫–æ–º"""

    # üî• –¢–û–ü-5 –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –∑–∞ —Å–µ—Ä–µ–¥–Ω—ñ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    top_professors = Professor.objects.annotate(
        avg_rating=(Avg('feedback__professionalism') + Avg('feedback__clarity') + Avg('feedback__attitude')) / 3
    ).order_by('-avg_rating')[:5]

    # üî• –¢–û–ü-5 –∫–∞—Ñ–µ–¥—Ä –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º (—Å–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ —É—Å—ñ—Ö –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –∫–∞—Ñ–µ–¥—Ä–∏)
    top_departments = Department.objects.annotate(
        avg_professionalism=Avg('professors__feedback__professionalism'),
        avg_clarity=Avg('professors__feedback__clarity'),
        avg_attitude=Avg('professors__feedback__attitude'),
    ).annotate(
        avg_rating=(F('avg_professionalism') + F('avg_clarity') + F('avg_attitude')) / 3  # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –±–∞–ª—É
    ).order_by('-avg_rating')[:5]

    # üî• –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤, –∫–∞—Ñ–µ–¥—Ä —Ç–∞ –≤—ñ–¥–≥—É–∫—ñ–≤
    total_professors = Professor.objects.count()
    total_departments = Department.objects.count()
    total_reviews = Feedback.objects.count

    return render(request, "home.html", {
        "top_professors": top_professors,
        "top_departments": top_departments,
        "total_professors": total_professors,  
        "total_departments": total_departments,  
        "total_reviews": total_reviews,  
    })

from django.http import JsonResponse, HttpResponse
from django.db.models import Q, Avg
import traceback

def professor_autocomplete(request):
    """API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π (—É—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä, –ø—Ä–æ–±–µ–ª—ã –∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"""
    query = request.GET.get('q', '').strip().lower()

    try:
        if query:
            professors = Professor.objects.filter(
                Q(name__icontains=query) |  # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                Q(name__icontains=query.capitalize())  # –î–ª—è –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π
            ).annotate(
                calculated_avg_rating=(Avg('feedback__professionalism') +
                                       Avg('feedback__clarity') +
                                       Avg('feedback__attitude')) / 3
            ).order_by('-calculated_avg_rating')[:5]  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É

            results = []
            for professor in professors:
                avg_rating = professor.calculated_avg_rating
                results.append({
                    'id': professor.id,
                    'name': professor.name.strip(),  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                    'photo': professor.photo.url if professor.photo else '/static/default_photo.jpg',
                    'avg_rating': round(avg_rating, 1) if avg_rating else "N/A"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1 –∑–Ω–∞–∫–æ–º –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                })

            return JsonResponse({'results': results}, safe=False)

        return JsonResponse({'results': []}, safe=False)

    except Exception as e:
        print("üî¥ –ü–æ–º–∏–ª–∫–∞ –≤ `professor_autocomplete`:", str(e))
        print(traceback.format_exc())  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª–∏ Django
        return JsonResponse({'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)



def department_ranking(request):
    departments = Department.objects.annotate(
        avg_professionalism=Avg('professors__feedback__professionalism'),
        avg_clarity=Avg('professors__feedback__clarity'),
        avg_attitude=Avg('professors__feedback__attitude'),
        professor_count=Count('professors'),
        avg_rating=(F('avg_professionalism') + F('avg_clarity') + F('avg_attitude')) / 3
    ).order_by('-avg_rating')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ñ–µ–¥—Ä
    faculties = Department.objects.select_related('faculty').values_list('faculty__id', 'faculty__name').distinct().order_by('faculty__name')

    return render(request, 'department_ranking.html', {
        'departments': departments,
        'faculties': [{'id': fid, 'name': fname} for fid, fname in faculties if fname],
        'total_professors': Professor.objects.count()
    })

def department_detail(request, department_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ñ–µ–¥—Ä—ã —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏"""
    department = get_object_or_404(Department, id=department_id)
    sort_option = request.GET.get('sort', 'rating')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É

    cache_key = f"department_professors_{department_id}_{sort_option}"
    professors = cache.get(cache_key)

    if not professors:
        professors = department.professors.annotate(
            avg_rating=(Avg('feedback__professionalism') + Avg('feedback__clarity') + Avg('feedback__attitude')) / 3,
            feedback_count=Count('feedback')
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        if sort_option == 'feedback_count':
            professors = professors.order_by('-feedback_count')
        else:  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            professors = professors.order_by('-avg_rating')

        cache.set(cache_key, list(professors), timeout=86400)

    return render(request, 'department_detail.html', {
        'department': department,
        'professors': professors,
        'sort_option': sort_option
    })

def get_client_ip(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    x_forwarded_for = request.META.get("HTTP_X_FORWARDED_FOR")
    if x_forwarded_for:
        ip = x_forwarded_for.split(",")[0]
    else:
        ip = request.META.get("REMOTE_ADDR")
    return ip


def professor_detail(request, professor_id):
    professor = get_object_or_404(Professor, id=professor_id)
    user_ip = get_client_ip(request)  # üìå –ü–æ–ª—É—á–∞–µ–º IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–≤–ª—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∑—ã–≤
    existing_feedback = Feedback.objects.filter(professor=professor, user_ip=user_ip).first()

    if request.method == "POST":
        form = FeedbackForm(request.POST, instance=existing_feedback)
        if form.is_valid():
            feedback = form.save(commit=False)
            feedback.professor = professor
            feedback.user_ip = user_ip  # üìå –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º IP

            try:
                feedback.save()

                # üîπ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                professor_avg_rating = professor.calculate_avg_rating()

                return redirect('professor_detail', professor_id=professor.id)  # ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
            except IntegrityError:
                return JsonResponse({"error": "–¢–∞–∫–æ–π –æ—Ç–∑—ã–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"}, status=400)
        else:
            return JsonResponse({"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã!"}, status=400)

    else:
        form = FeedbackForm(instance=existing_feedback)

    feedbacks = Feedback.objects.filter(professor=professor).order_by("-created_at")

    # üîπ –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    professor_avg_rating = professor.calculate_avg_rating()

    return render(request, "professor_detail.html", {
        "professor": professor,
        "form": form,
        "existing_feedback": existing_feedback,
        "feedbacks": feedbacks,
        "professor_avg_rating": professor_avg_rating,  # üîπ –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —à–∞–±–ª–æ–Ω
    })

def professor_list(request, department_id):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∫–∞—Ñ–µ–¥—Ä—ã"""
    department = get_object_or_404(Department, id=department_id)

    professors = department.professors.annotate(
        calculated_avg_rating=(
            Avg('feedback__professionalism') +
            Avg('feedback__clarity') +
            Avg('feedback__attitude')
        ) / 3
    )

    return render(request, "professor_list.html", {
        "department": department,
        "professors": professors,
    })


def statistics_view(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""

    # 1Ô∏è‚É£ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—Ñ–µ–¥—Ä
    departments = Department.objects.annotate(
        avg_rating=(Avg('professors__feedback__professionalism') +
                    Avg('professors__feedback__clarity') +
                    Avg('professors__feedback__attitude')) / 3
    ).order_by('-avg_rating')[:10]  # –¢–æ–ø-10 –∫–∞—Ñ–µ–¥—Ä

    # 2Ô∏è‚É£ –¢–æ–ø-5 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
    top_professors = Professor.objects.annotate(
        avg_rating=(Avg('feedback__professionalism') +
                    Avg('feedback__clarity') +
                    Avg('feedback__attitude')) / 3
    ).order_by('-avg_rating')[:5]

    # 3Ô∏è‚É£ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫–∞—Ñ–µ–¥—Ä–∞–º
    department_feedbacks = Department.objects.annotate(
        feedback_count=Count('professors__feedback')
    ).order_by('-feedback_count')[:10]

    context = {
        'departments': departments,
        'top_professors': top_professors,
        'department_feedbacks': department_feedbacks,
    }

    return render(request, 'statistics.html', context)

def like_feedback(request, feedback_id):
    feedback = get_object_or_404(Feedback, id=feedback_id)
    user_ip = get_client_ip(request)

    if feedback.user_ip == user_ip:
        return JsonResponse({'error': "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ª–∞–π–∫–∞—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤!"}, status=400)

    feedback.likes += 1
    feedback.save()
    return JsonResponse({'likes': feedback.likes})

def dislike_feedback(request, feedback_id):
    feedback = Feedback.objects.get(id=feedback_id)
    feedback.dislikes += 1
    feedback.save()
    return JsonResponse({'dislikes': feedback.dislikes})

def donation_page(request):
    return render(request, "donation_page.html")

def privacy_policy(request):
    return render(request, "privacy_policy.html")

def health_check(request):
    return HttpResponse("OK")
    
from django.conf.urls import handler404, handler500, handler403
from django.shortcuts import render

def custom_404(request, exception):
    return render(request, '404.html', status=404)

def custom_500(request):
    return render(request, '500.html', status=500)

def custom_403(request, exception):
    return render(request, '403.html', status=403)

from .models import Professor
def all_professors(request):
    professors = Professor.objects.all()
    return render(request, 'professors_list.html', {'professors': professors})